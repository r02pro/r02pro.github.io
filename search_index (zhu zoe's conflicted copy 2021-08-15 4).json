[["sort-vector.html", "2.4 Sort, Rank, &amp; Order", " 2.4 Sort, Rank, &amp; Order In the past two sections, you have mastered how to create vectors of different types including numeric, character and logical. In addition, you know how to create vectors with patterns. A vector usually contains more than one elements. Sometimes, you want to order the elements in various ways. In this section, we will introduce important functions that relate to ordering elements in a vector. 2.4.1 Numeric vectors Let’s start with numeric vectors. Firstly, let’s create a numeric vector which will be used throughout this section. x &lt;- c(2, 3, 2, 0, 4, 7) x #check the value of x a. Sort vectors The first function we will introduce is sort(). By default, the sort() function sorts elements in vector in the ascending order, namely from the smallest to largest. sort(x) #&gt; [1] 0 2 2 3 4 7 If you want to sort the vector in the descending order, namely from the largest to smallest, you can set a second argument decreasing = TRUE. sort(x, decreasing = TRUE) b. Ranks of vectors Next, let’s talk about ranks. The rank() function gives the ranks for each element of the vector, namely the corresponding positions in the ascending order. rank(x) #&gt; [1] 2.5 4.0 2.5 1.0 5.0 6.0 If you check the value of x, you can see that the smallest value of x is 0, which corresponds to the fourth element. Thus, the fourth element has rank 1. The second smallest value of x is 2, which is shared at the first and the third elements, resulting a tie (elements with the same value will result in a tie). Normally, these two elements would have ranks 2 and 3. To break the tie, the rank() function assigns all the elements involving in the tie (the first and third elements in this example) the same rank, which is average of all their ranks (the average of 2 and 3), by default. In addition to this default behavior for handling ties, rank() also provides other options by setting the ties.method argument. If you set ties.method = \"min\", all the tied elements will have the minimum rank instead of the average rank. In this case, the minimum rank is 2. rank(x, ties.method = &quot;min&quot;) #&gt; [1] 2 4 2 1 5 6 If you want to break the ties by the order it appears in the vector, you can set ties.method = \"first\". Then the earlier appearing element will have smaller ranks than the later one. In this example, the first element will have rank 2 and the third element has rank 3, since the first element appears earlier than the third element. There are other options for handling ties, which you can look up in the documentation of rank() if interested. rank(x, ties.method = &quot;first&quot;) #&gt; [1] 2 4 3 1 5 6 Unlike sort(), you can’t get positions in the descending order from the rank() function, which means you can’t add decreasing = TRUE in rank(). c. Order of vectors The next item we want to introduce is the order() function. Note that the function name order could be a bit misleading since ordering elements also has the same meaning of sorting. However, although it is related to sorting, it is a very different function from sort(). Let’s recall the values of x and apply order() to x. x #&gt; [1] 2 3 2 0 4 7 order(x) #&gt; [1] 4 1 3 2 5 6 From the result, you can see that the order() function returns indices for the elements in the ascending order, namely from the smallest to the largest. For example, the first output is 4, indicating the 4th element in x is the smallest. The second output is 1, showing the 1st element in x is the second smallest. Unlike rank(), the order() function breaks the ties by the appearing order by default. If you want the indices corresponding to the descending order, then you can set decreasing = TRUE just like what we did in the sort() function. order(x, decreasing = TRUE) So far, we have covered sort(), rank() and order() functions for numeric vectors. It is helpful to provide a brief summary. The sort() function sorts elements in vectors. The rank() function will give ranks for each element of the vector. The order() function returns indices for the elements. 2.4.2 Character vectors Now, let’s move to character vectors. For character vectors, R uses the lexicographical ordering, which is sometimes called dictionary order since it is the order used in a dictionary. Similar to numeric vectors, let’s first prepare a character vector. Note that the strings in character vectors can contain letters, numbers, or symbols. char_vec &lt;- c(&quot;a&quot;, &quot;A&quot;, &quot;B&quot;, &quot;b&quot;, &quot;ab&quot;,&quot;aC&quot;, &quot;1c&quot;, &quot;.a&quot;, &quot;1a&quot;,&quot;2a&quot;,&quot;.a&quot;,&quot;&amp;u&quot;,&quot;3&quot;,&quot;_4&quot;) a. Ordering rules First, let’s discuss the ordering of a single character, including symbols, digits and letters. There are a few important ordering rules as follows. symbols &lt; digits &lt; letters: symbols appear first, followed by digits, and letters come last. symbols are ordered in the following way. #&gt; [1] &quot; &quot; &quot;_&quot; &quot;-&quot; &quot;,&quot; &quot;;&quot; &quot;!&quot; &quot;?&quot; &quot;.&quot; &quot;(&quot; &quot;)&quot; &quot;[&quot; &quot;]&quot; &quot;{&quot; &quot;}&quot; &quot;@&quot; &quot;*&quot; &quot;/&quot; &quot;&amp;&quot; &quot;#&quot; &quot;%&quot; &quot;`&quot; &quot;^&quot; &quot;+&quot; &quot;&lt;&quot; &quot;=&quot; &quot;&gt;&quot; &quot;|&quot; &quot;$&quot; digits are in an ascending order: the smaller digits appear earlier than the bigger ones. #&gt; [1] 0 1 2 3 4 5 6 7 8 9 letters are alphabetically ordered, for the same letter，the lower case comes first. \\(a&lt;A&lt;b&lt;B&lt;\\cdots&lt;z&lt;Z\\). #&gt; [1] &quot;a&quot; &quot;A&quot; &quot;b&quot; &quot;B&quot; &quot;c&quot; &quot;C&quot; &quot;d&quot; &quot;D&quot; &quot;e&quot; &quot;E&quot; &quot;f&quot; &quot;F&quot; &quot;g&quot; &quot;G&quot; &quot;h&quot; &quot;H&quot; &quot;i&quot; &quot;I&quot; &quot;j&quot; &quot;J&quot; &quot;k&quot; &quot;K&quot; &quot;l&quot; &quot;L&quot; &quot;m&quot; &quot;M&quot; &quot;n&quot; &quot;N&quot; &quot;o&quot; #&gt; [30] &quot;O&quot; &quot;p&quot; &quot;P&quot; &quot;q&quot; &quot;Q&quot; &quot;r&quot; &quot;R&quot; &quot;s&quot; &quot;S&quot; &quot;t&quot; &quot;T&quot; &quot;u&quot; &quot;U&quot; &quot;v&quot; &quot;V&quot; &quot;w&quot; &quot;W&quot; &quot;x&quot; &quot;X&quot; &quot;y&quot; &quot;Y&quot; &quot;z&quot; &quot;Z&quot; You can combine symbols, numbers and letters into a single vector and get the order. all_chars &lt;- c(syms, nums, all_letters) sort(all_chars) b. Sort vectors As before, you can apply sort() on character vectors. Basically, it orders by the first character, moves to the second character if there are ties in the first character (same first character), and look at more characters until the ties are broken or run out of characters. sort(char_vec) #&gt; [1] &quot;_4&quot; &quot;.a&quot; &quot;.a&quot; &quot;&amp;u&quot; &quot;1a&quot; &quot;1c&quot; &quot;2a&quot; &quot;3&quot; &quot;a&quot; &quot;A&quot; &quot;ab&quot; &quot;aC&quot; &quot;b&quot; &quot;B&quot; We have the following observations. According to the ordering rule of symbols, _4 is the first, .a should be the second and &amp;u is the third. 1a and 1c have the same first character, since a comes before c, 1a comes before 1c. ab and aC have the same first character, since b comes before C (regardless of the case), ab comes before aC. Of course, we can also have the order reversed by setting decreasing = TRUE. sort(char_vec, decreasing = TRUE) c. Ranks of vectors Similarly, you can look at the ranks for each element according to the ordering rules. Here, the element with rank 1 is _4 and .a has rank 2. Just like numeric vectors, if you have elements with the same value in character vectors, the rank of these elements will be the same (the average of the corresponding ranks) by default. rank(char_vec) #&gt; [1] 9.0 10.0 14.0 13.0 11.0 12.0 6.0 2.5 5.0 7.0 2.5 4.0 8.0 1.0 As expected, you can set the ties.method argument in rank() to use other methods for breaking ties. rank(char_vec, ties.method = &quot;min&quot;) rank(char_vec, ties.method = &quot;first&quot;) d. Order of vectors Again, you can get the order of each element in character vectors with the same order() function like that for numeric vectors. order(char_vec) #&gt; [1] 14 8 11 12 9 7 10 13 1 2 5 6 4 3 The decreasing argument still works for order()! order(char_vec, decreasing = TRUE) #&gt; [1] 3 4 6 5 2 1 13 10 7 9 12 8 11 14 2.4.3 Logical vectors Since there are only two possible values TRUE and FALSE for logical vectors, it is straightforward to sort them with the knowledge of FALSE &lt; TRUE. You can try the following example. logi_vec &lt;- c(TRUE, FALSE, FALSE, TRUE, TRUE) sort(logi_vec) rank(logi_vec) order(logi_vec) 2.4.4 Exercise You can run the following code to do the exercise. r02pro(2) "]]
