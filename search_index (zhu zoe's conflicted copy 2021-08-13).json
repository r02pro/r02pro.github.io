[["r-objects.html", "Chapter 2 R Objects", " Chapter 2 R Objects In R, everything is an object. An object can contain values of different types including numbers, characters, and any intermediate results from operations. For example, 5 is an object with the value 5. In the last chapter, we have seen the power of R as a fancy calculator. However, in order to do more complicated and interesting tasks, we may need to store intermediate results for future use. Let’s take a look at a concrete example. Say if you want to do the following calculations involving exp(3) / log(20,3) * 7. (exp(3) / log(20,3) * 7) + 3 #addition (exp(3) / log(20,3) * 7) - 3 #subtraction (exp(3) / log(20,3) * 7) / 3 #division You need to type the expression three times, which is a bit cumbersome. In this chapter, we will introduce how to assign the value of the object exp(3) / log(20,3) * 7 to a name for future use. Then, for any operation involving exp(3) / log(20,3) * 7, you can just use the corresponding object name instead. In R, there are a few different object types, which we will cover each of them in detail in this Chapter. "],["Object-Assignment.html", "2.1 Object Assignment", " 2.1 Object Assignment 2.1.1 Assignment Operation with &lt;- Firstly, we will introduce how to assign value(s) (of objects) to a name via the assignment operator. Let’s start with a simple example, x_numeric &lt;- 5 The assignment operation has three components. From left to right，the first component x_numeric is the object name, which has certain naming rules which we will discuss shortly in Section 2.1.3. The second component is the assignment operator &lt;-, which is a combination of the less than sign &lt; immediately followed by the minus sign -. The final component is the value to be assigned to the name, which is 5 here. There is no space between &lt; and - in the assignment operator &lt;-. Note that although = may also appear to be working as the assignment operator, it is not recommended as = is usually reserved for specifying the value of arguments in a function call, which will be introduced in Section 2.3. After running the code above, you will see no output in the console, unlike the case when we ran 1 + 2 which gives us the answer 3 (as shown in the Figure 2.1). You may be wondering, did we successfully make our first assignment operation? Figure 2.1: No output To verify it, you can run the code with just the object name to check its value. x_numeric #&gt; [1] 5 Great! You get the value 5, indicating that you have successfully assigned the value 5 to x_numeric. Here, 5 is the value of the object 5, you can also assign the value of any R expression to a name. In this case, R will first calculate the value of the expression and assign the value to the name. Let’s see the following example. y_numeric &lt;- exp(3) / log(20,3) * 7 y_numeric #&gt; [1] 51.56119 Using the object name y_numeric, you can do the same three calculations introduced at the beginning of this chapter as follows. y_numeric + 3 y_numeric - 3 y_numeric / 3 Clearly, using the object name, you greatly simplify our code and avoid the redundancy. Note that R object names are case-sensitive. For example, you have defined x_numeric, but if you type X_numeric, you will get an error message as follow. X_numeric #&gt; Error in eval(expr, envir, enclos): object &#39;X_numeric&#39; not found 2.1.2 Review objects in environment After creating the objects x_numeric and y_numeric, they also appear in the Environment, located in the top right ?? panel (panel3 in Figure ??). You can check all the named objects and their values in this area. It is helpful to monitor the environment from time to time to make sure everything looks fine. You can also see the list of all the objects you have defined using function ls(). ls() #&gt; [1] &quot;ani_char&quot; &quot;animal&quot; &quot;animal_tidy&quot; #&gt; [4] &quot;animal_wide&quot; &quot;animal_wide_weight&quot; &quot;Code&quot; #&gt; [7] &quot;d&quot; &quot;dig_num&quot; &quot;dig_num_new&quot; #&gt; [10] &quot;h&quot; &quot;key_mat&quot; &quot;Keys&quot; #&gt; [13] &quot;my_list&quot; &quot;n&quot; &quot;Name&quot; #&gt; [16] &quot;norm_dat&quot; &quot;norm_dat_1&quot; &quot;norm_dat_2&quot; #&gt; [19] &quot;norm_dat_3&quot; &quot;p&quot; &quot;para_1&quot; #&gt; [22] &quot;para_2&quot; &quot;q&quot; &quot;Section&quot; #&gt; [25] &quot;Type&quot; &quot;weight&quot; &quot;x&quot; #&gt; [28] &quot;x_numeric&quot; &quot;x1&quot; &quot;x2&quot; #&gt; [31] &quot;x3&quot; &quot;y_numeric&quot; &quot;year&quot; 2.1.3 Object naming rule Now you have created two objects named x_numeric and y_numeric. In general, R is very flexible in the name you give to an object，however, there are three important rules you need to follow. a. Must start with a letter or . (period) If starting with period, the second character can’t be a number. b. Can only contain letters, numbers, _ (underscore), and . (period) One recommended naming style is to only use lower case letters and numbers, and use underscore to separate words within a name. So you can use relatively longer names that is more readable. c. Can not use special keywords as names. For example, TRUE &lt;- 12 is not permitted as TRUE is a special keyword in R. You can see from the following that this assignment operation leads to an error message. TRUE &lt;- 12 #&gt; Error in TRUE &lt;- 12: invalid (do_set) left-hand side to assignment Some commonly used keywords that cannot be used as names are listed as below. break NA else NaN FALSE next for repeat function return if TRUE Inf while 2.1.4 Object types In this section, you have learned about how to assign a value to a name. The values we assigned are of numeric type. In addition, an object may contain more than one values. Also the values it contains can be of other types than numeric, including character, logical and the combination of different types. Depending on the structure, the object belongs to one particular type. We will give a comprehensive treatment to the following object types in this chapter. Type Section Vector 2.2 Matrix ?? Array ?? Data Frame ?? List ?? While some of the object types look more intuitive than others, you have nothing to worry about since we have this whole chapter devoted to the details of R objects. Objects are the building blocks of R programming and it will be time well spent mastering every object type. 2.1.5 Exercise You can run the following code to do the exercise. r02pro(2.1) "]]
