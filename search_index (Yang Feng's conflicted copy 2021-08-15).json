[["bar-charts.html", "3.10 Bar Charts via geom_bar", " 3.10 Bar Charts via geom_bar For visualizing the relationship between two continuous variables, we have been learned various kinds of plots, including scatterplot (Sections 3.2 and 3.3), smoothline fit (Section 3.4), and line plot (Section 3.7). In this section, we will introduce a new kind of plot called bar chart. A bar chart uses rectangular bars with heights or lengths proportional to the values they represent, in order to visualize a discrete variable. 3.10.1 An Introduction to Bar Chart In the sahp dataset, you may be interested in the distribution of kitchen quality of the house (denoted in the kit_qual variable). To generate a bar chart, you can use the function geom_bar(). library(ggplot2) library(r02pro) ggplot(data = sahp) + geom_bar(mapping = aes(x = kit_qual)) In the bar chart, the x-axis displays different values of kit_qual, and the y-axis displays the number of observations with each kit_qual value. To verify this, let’s check how many house have kit_qual equals Excellent. sum(sahp$kit_qual == &quot;Excellent&quot;) #&gt; [1] 14 We can see the answer 14 matches the value on the bar chart. You may have noticed that the y-axis count is not a variable in sahp! This is also the reason that we don’t need to specify the y argument in the aes() function. In this sense, bar charts are very different from many other graphs like scatterplots, which plot the raw values of datasets. Sometimes, we would like to find out the proportion for each value of x, then we can display a bar chart of proportion, rather than count. To do this, we need to add y = stat(prop) and group = 1 ad additional arguments in the aes() function. The stat(prop) is a statistical function used to calculate proportions. The group = 1 implies that all the observations belong to one single group when calculating the proportions. We will try to set group to another variable in the next part. ggplot(data = sahp) + geom_bar(mapping = aes(x = kit_qual, y = stat(prop), group = 1)) 3.10.2 Reordering Bars in Bar Charts In our bar chart example, the bars are ordered alphabetically. Sometimes, we may want to reorder the bars according to certain criterion. a. Reorder in ascending/descending order of heights To order the bars in ascending/descending order of their heights, you can use the fct_reorder() function to reorder the factor. library(forcats) ggplot(data = sahp) + geom_bar(mapping = aes(x = fct_reorder(kit_qual, kit_qual, length))) #increasing order The above code reorders the bar chart to the increasing order of their heights. The fct_reorder() is a very powerful function used to record the levels of a factor. The function fct_reorder(.f, .x, .fun = median) has three arguments: .f: the discrete variable/factor to reorder .x: one variable .fun: the function to be applied to .x The levels of f are reordered so that the values of .fun(.x) are in ascending order. In our example, we reorder the levels of kit_qual such that the length of kit_qual is in ascending order, i.e. the bars are in ascending order of their heights. To reorder in descending order of heights, you can add and additional argument .desc = TRUE in the fct_reorder() function. ggplot(data = sahp) + geom_bar(mapping = aes(x = fct_reorder(kit_qual, kit_qual, length, .desc = TRUE))) #increasing order b. Manual Reorder In addition to reordering according to certain function values, you can use the function fct_relevel() to manually reorder the bars in a bar chart. In our example of kit_qual, perhaps a common thought is to order the levels from the worst quality to the best quality. ggplot(data = sahp) + geom_bar(mapping = aes(x = fct_relevel(kit_qual, c(&quot;Average&quot;, &quot;Fair&quot;, &quot;Good&quot;, &quot;Excellent&quot;)))) As you can imagine, the second argument of fct_relevel() contains the desired order of the factors, which will be reflected in the order of the bars. 3.10.3 Aesthetics in Bar Charts As before, we can use aesthetics to control the appearance of bar charts. First, let’s look at a new aesthetic called fill, which fills the bar with different colors according to the value of the mapped variable (usually another discrete variable). Here, we want to look at the distribution of kit_qual for different values of central_air. ggplot(data = sahp) + geom_bar(mapping = aes(x = kit_qual, fill = central_air)) As it is shown in the plot, each bar is divided into two groups according to whether central_air = TRUE. Let’s verify the first bar. sum(sahp$kit_qual == &quot;Average&quot; &amp; sahp$central_air) #&gt; Error in sahp$kit_qual == &quot;Average&quot; &amp; sahp$central_air: operations are possible only for numeric, logical or complex types Clear, the result matches the blue portion of the first bar. a. stacked bars ggplot(data = sahp) + geom_bar(mapping = aes(x = kit_qual, fill = central_air), position = &quot;stack&quot;) b. dodged bars ggplot(data = sahp) + geom_bar(mapping = aes(x = kit_qual, fill = central_air), position = &quot;dodge&quot;) c. filled bars ggplot(data = sahp) + geom_bar(mapping = aes(x = kit_qual, fill = central_air), position = &quot;fill&quot;) Lastly, you can also use the polar coordinates. ggplot(data = sahp) + geom_bar(mapping = aes(x = kit_qual)) + coord_polar() "]]
