[["joins.html", "7.7 Joins", " 7.7 Joins So far, we have been working on a single data set. In applications, however, we often have the need to combine multiple data sets into a single one before doing data analysis. Let’s prepare two data sets to show the various ways we can join two data sets. library(tidyverse) ## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── ## ✔ dplyr 1.1.0 ✔ readr 2.1.4 ## ✔ forcats 1.0.0 ✔ stringr 1.5.0 ## ✔ ggplot2 3.4.1 ✔ tibble 3.2.1 ## ✔ lubridate 1.9.2 ✔ tidyr 1.3.0 ## ✔ purrr 1.0.1 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() ## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors library(r02pro) top_pop &lt;- gm %&gt;% filter(year == 2008 &amp; !is.na(continent)) %&gt;% mutate(r = rank(desc(population), ties.method = &quot;first&quot;)) %&gt;% filter(r &lt;= 5) %&gt;% select(country, population, HDI_category) %&gt;% arrange(desc(population)) HDI_cate_dict &lt;- tibble(HDI_category = c(&quot;low&quot;, &quot;medium&quot;, &quot;high&quot;), HDI_description = c(&quot;below 0.549&quot;, &quot;between 0.550–0.699&quot;, &quot;between 0.700–0.799&quot;)) Here, top_pop is a tibble of the top 3 countries with the highest population in 2008. HDI_cate_dict is a tibble that provides the description of the Human Development Index (HDI) categories. It is clear that the two tibbles share a variable named HDI_category. It could be interesting to join the two tibbles into a single one by including all variables while matching the values of HDI_category. The bridging variable HDI_category is usually called the key to the joining operation. Next, we will discuss several different join operations between top_pop and HDI_cate_dict, with the key being HDI_category. 7.7.1 Inner Join The first type of join operation on two tables with a set of keys is called inner join. You can use the inner_join(tb1, tb2) function, which returns all rows in tb1 such that there are matching values of the corresponding keys in tb2. inner &lt;- inner_join(top_pop, HDI_cate_dict, by = &quot;HDI_category&quot;) inner ## # A tibble: 4 × 4 ## country population HDI_category HDI_description ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 China 1360000 medium between 0.550–0.699 ## 2 India 1220000 medium between 0.550–0.699 ## 3 Indonesia 239000 medium between 0.550–0.699 ## 4 Brazil 194000 high between 0.700–0.799 From the result, you can see that there are 4 observations. Each observation corresponds to one row in top_pop that has a matching value in HDI_cate_dict for HDI_category. The observation corresponding to United States in top_pop is dropped in the result since its HDI_category value is \"very high\", which doesn’t have a matched row in HDI_cate_dict. 7.7.2 Left Join The second type of join operation on two tables with a set of keys is called left join. You can use the left_join(tb1, tb2) function, which returns all rows in tb1, no matter whether there are matching values of the corresponding keys in tb2. left &lt;- left_join(top_pop, HDI_cate_dict, by = &quot;HDI_category&quot;) left ## # A tibble: 5 × 4 ## country population HDI_category HDI_description ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 China 1360000 medium between 0.550–0.699 ## 2 India 1220000 medium between 0.550–0.699 ## 3 United States 306000 very high &lt;NA&gt; ## 4 Indonesia 239000 medium between 0.550–0.699 ## 5 Brazil 194000 high between 0.700–0.799 As you can see from the result, all rows in top_pop is kept, even though United States doesn’t have a matching observation in HDI_cate_dict for the variable HDI_category. In this case, the corresponding value for HDI_description is NA. 7.7.3 Right Join The third type of join operation on two tables with a set of keys is called right join, which works in a similar fashion as left join. You can use the right_join(tb1, tb2) function, which returns all rows in tb2, no matter whether there are matching values of the corresponding keys in tb1 or not. right &lt;- right_join(top_pop, HDI_cate_dict, by = &quot;HDI_category&quot;) right ## # A tibble: 5 × 4 ## country population HDI_category HDI_description ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 China 1360000 medium between 0.550–0.699 ## 2 India 1220000 medium between 0.550–0.699 ## 3 Indonesia 239000 medium between 0.550–0.699 ## 4 Brazil 194000 high between 0.700–0.799 ## 5 &lt;NA&gt; NA low below 0.549 As you can see from the result, all rows in HDI_cate_dict is kept, even though there aren’t any matching observations in top_pop for HDI_category == \"low\". In this case, the corresponding values for country and population are NA. 7.7.4 Full Join The fourth type of join operation on two tables with a set of keys is called full join. You can use the full_join(tb1, tb2) function, which returns all rows in both tb1 and tb2, no matter whether there are matching values of the keys in either tb1 or tb2. full &lt;- full_join(top_pop, HDI_cate_dict, by = &quot;HDI_category&quot;) full ## # A tibble: 6 × 4 ## country population HDI_category HDI_description ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 China 1360000 medium between 0.550–0.699 ## 2 India 1220000 medium between 0.550–0.699 ## 3 United States 306000 very high &lt;NA&gt; ## 4 Indonesia 239000 medium between 0.550–0.699 ## 5 Brazil 194000 high between 0.700–0.799 ## 6 &lt;NA&gt; NA low below 0.549 As you can see from the result, all rows in both top_pop and HDI_cate_dict are kept. The rows in top_pop that don’t have matching values in HDI_cate_dict are filled with NA for the variables in HDI_cate_dict, and vice versa. 7.7.5 Filtering Joins For the previous four types of joins, the resulting table contains columns from both input tables. Sometimes, you may want to only keep the columns from one of the input tables. This is called filtering joins, meaning that it is actually doing the filtering operations like the filter() function we learned in Section 7.1. a. Semi Join The first type of filtering joins is called semi join, in which semi_join(tb1, tb2) returns all rows from tb1 where there are matching values in tb2 for the keys. semi_join(top_pop, HDI_cate_dict, by = &quot;HDI_category&quot;) ## # A tibble: 4 × 3 ## country population HDI_category ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 China 1360000 medium ## 2 India 1220000 medium ## 3 Indonesia 239000 medium ## 4 Brazil 194000 high From the result, you can see that only the rows in top_pop that have matching values in HDI_cate_dict for HDI_category are kept. Again, the columns from HDI_cate_dict are not included in the output, making it a filtering operation. b. Anti Join Another type of filtering joins is called anti join, in which anti_join(tb1, tb2) returns all rows from tb1 where there don’t exist matching values in tb2 on the keys. anti_join(top_pop, HDI_cate_dict, by = &quot;HDI_category&quot;) ## # A tibble: 1 × 3 ## country population HDI_category ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 United States 306000 very high From the result, you can see that only the rows in top_pop that don’t have matching values in HDI_cate_dict for HDI_category are kept. The columns from HDI_cate_dict are not included in the output, making it a filtering operation. 7.7.6 A Summary of All Joins Finally, we summarize all the six joins in the following table, in terms of which rows and columns are selected in the final output. Code Rows Columns inner_join(tb1, tb2, by) Rows in both tb1 and tb2 Columns in either tb1 or tb2 left_join(tb1, tb2, by) Rows in tb1 Columns in either tb1 or tb2 right_join(tb1, tb2, by) Rows in tb2 Columns in either tb1 or tb2 full_join(tb1, tb2, by) All rows in tb1 or tb2 Columns in either tb1 or tb2 semi_join(tb1, tb2, by) Rows in tb1 with matching keys in tb2 Only columns in tb1 anti_join(tb1, tb2, by) Rows in tb1 without matching keys in tb2 Only columns in tb1 7.7.7 Exercises First, let’s prepare two data sets for the exercises. library(tidyverse) library(r02pro) d1 &lt;- ahp %&gt;% select(dt_sold, bsmt_area, bsmt_ht) %&gt;% head(n = 5) d2 &lt;- tibble(bsmt_ht = c(&quot;Excellent&quot;, &quot;Good&quot;, &quot;Average&quot;, &quot;Poor&quot;), height = c(&quot;100+ inches&quot;, &quot;90-99 inches&quot;, &quot;80-89 inches&quot;, &quot;&lt;70 inches&quot;)) d1 ## # A tibble: 5 × 3 ## dt_sold bsmt_area bsmt_ht ## &lt;date&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 2010-03-25 725 Average ## 2 2009-04-10 913 Good ## 3 2010-01-15 1057 Average ## 4 2010-04-19 384 Good ## 5 2010-03-22 676 Fair d2 ## # A tibble: 4 × 2 ## bsmt_ht height ## &lt;chr&gt; &lt;chr&gt; ## 1 Excellent 100+ inches ## 2 Good 90-99 inches ## 3 Average 80-89 inches ## 4 Poor &lt;70 inches Perform an inner join between d1 and d2 by the key bsmt_ht. What are the rows and columns in the final output? Perform a left join between d1 and d2 by the key bsmt_ht. What are the rows and columns in the final output? Perform a right join between d1 and d2 by the key bsmt_ht. What are the rows and columns in the final output? Perform a full join between d1 and d2 by the key bsmt_ht. What are the rows and columns in the final output? Perform a semi join between d1 and d2 by the key bsmt_ht. What are the rows and columns in the final output? Perform an anti join between d1 and d2 by the key bsmt_ht. What are the rows and columns in the final output? Define d2_new by adding a new column to d2 called height_code with values 1, 2, 3, and 4 corresponding to \"Excellent\", \"Good\", \"Average\", and \"Poor\" in bsmt_ht, respectively. Perform an inner join between d1 and d2_new by bsmt_ht. Does adding this new column affect the join results? Define d1_filter by filtering d1 to only include rows where bsmt_area is between 600 and 800. Perform a left join between d1_filter and d2 by bsmt_ht. How many rows in the joined dataset come from d2? Defined d1_na by replacing bsmt_ht in the first row of d1 with NA. Perform a full join between d1_na and d2 by bsmt_ht. How does this missing value affect the join result? Add a row in d2 with bsmt_ht = \"Very Good\" and height = \"95-99 inches\". Perform an anti join between d1 and the updated d2 by bsmt_ht. Explain which rows are retained in the output and why. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
