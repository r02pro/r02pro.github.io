[["import-data.html", "4.2 Importing Data from Delimited Files", " 4.2 Importing Data from Delimited Files Knowing how to export data into delimited files, let’s see how to import data from the delimited files. 4.2.1 Import .csv Files using read_csv() To import .csv files, we can use the function read_csv() in the readr package, which is a sub-package of tidyverse. If you have already installed tidyverse, you can directly load the readr package. After loading the readr package, you can try to import the data from “my_animals.csv,” which you want to make sure is in the current working directory. library(readr) my_animals &lt;- read_csv(&quot;my_animals.csv&quot;) #&gt; #&gt; ── Column specification ───────────────────────────── #&gt; cols( #&gt; dig_num = col_double(), #&gt; ani_char = col_character(), #&gt; conditions = col_character() #&gt; ) We can see there is a message showing the Column specification during the import process. In particular, we see dig_num is of type double (or numeric), and both ani_char and cond_fac are of type character. We can also check the value of my_animals and its structure. my_animals str(my_animals) We can see that the tibble my_animals is generated along with the correct column types. In order to introduce the various options associated with read_csv() function, let’s move on to the topic of inline .csv files next. 4.2.2 Read Inline .csv Files The read_csv() function not only can read files into R, it also accept inline input as its argument. While the inline input may not be commonly used in practice, it is particularly useful for learning how to use the function. Let’s see an example. read_csv(&quot;x,y,z 1,3,5 2,4,6&quot;) You can see that a tibble is generated with 2 rows and 3 columns with the column names being x, y and z. From the argument, we can see that by default, the first row of the input data will be interpreted as the column names. If the input data doesn’t correspond to the variable names, you need to set col_names = FALSE as an additional argument in read_csv(). read_csv(&quot;x,y,z 1,3,5 2,4,6&quot;, col_names = FALSE) Now, a tibble of 3 rows and 3 columns was generated, with the column names being X1, X2, and X3. Note that these are the naming convention in the function when you don’t supply the column names in the file. Another thing worth mentioning is that all three variables are of character types, due to the fact that there are character values for all variables (x, y, and z). Sometimes, the first few lines of your data file may be descriptions of the data, which you want to skip when import into R. We can set the skip argument in the read_csv() function to skip a certain number of lines. read_csv(&quot;The first line The second line The third line x,y,z 1,3,5&quot;, skip = 3) It is clear from the result that the first 3 lines of the input data is skipped. Another useful argument to when we have comments in the data file is the comment argument, which tells R to skip all text after the string specified in the comment argument. read_csv(&quot;x,y,z #variable names 1,3,5 #the first observation 2,4,6 #the second observation&quot;, comment = &quot;#&quot;) 4.2.3 Handing Missing Values In many real data sets, we may have missing values. You may recall that R uses NA to represent the missing values. If the data set was prepared by an R user, it probably already uses NA to represent all the missing values. In this case, read_csv() will automatically interpret all NAs as missing values. read_csv(&quot;x,y,z 999,3,5 NA,-999,6&quot;) In a typical application, however, the person who prepared the data may use other strings to represent missing value. For example, if 999 and -999 are used as the indicators for missing values, you can set the argument na to be the vector for those values. read_csv(&quot;x,y,z 999,3,5 999,-999,6&quot;, na = c(&quot;999&quot;,&quot;-999&quot;,&quot;NA&quot;)) You can see from the output tibble that all the missing values are now denoted as NA. 4.2.4 Importing data from a delimited file You now know how to import data from a .csv file using read_csv(). More generally, read_delim() allows us to import data from a delimited file with any chosen delimiter. The usage of read_delim() is almost identical to read_csv(), except that it has an additional argument delim, which specifies the delimiter to be used. Let’s see the following example with * as the delimiter. my_animals &lt;- read_delim(&quot;my_animals_star.csv&quot;, delim = &quot;*&quot;) #&gt; #&gt; ── Column specification ───────────────────────────── #&gt; cols( #&gt; dig_num = col_double(), #&gt; ani_char = col_character(), #&gt; conditions = col_character() #&gt; ) 4.2.5 Import data using the menu Besides writing codes involving read_csv() or read_delim() to import data, you can also take advantage of the interactive menu RStudio provides. To do this, you can click on the Import Dataset button in the Environment panel on the top right of RStudio. Here, you can see quite a few options which are summarized in the following table. Table 4.1: Import Data from Menu Choice Name From Text (readr) Delimited Files (.csv, .txt, and others) From Excel Excel Files (.xls and .xlsx) From SPSS SPSS Files (.sav) From SAS SAS Files (.sas7bdat and.sas7bcat) From Stata Stata Files (.dta) We will focus on importing delimited files in this section. We will cover importing Excel files in Section 4.3. Working with SPSS, SAS, and Stata files will be covered in Section 4.4. For importing a .csv file, .txt file, or any other file with a delimiter, you can choose the From Text (readr) option. Then, you can click Browse… and select the data file. After a file is selected, you can see the Data Preview which showing the first several rows of the data. Note that the first row shows the column names and their associate types in parentheses. For each column, you can click the dropdown menu after the type to change its type. When we select a .csv file, we may see the function read_csv() in the Code Preview window. Indeed, read_csv() is the backbone for reading .csv files into R. We need a screen shot? The bottom area shows many Import Options. Let’s look at a few commonly used options, their corresponding arguments in the read_csv() or read_delim() function, and meanings. Table 4.2: Menu Options and its Corresponding Arguments in read_delim() and Meanings Option Argument Meaning Name The object name you would like to assign to. Skip skip The number of rows to skip at the beginning of the file. First Row as Names col_names Whether you want to use the first row as column names. TRUE or FALSE. Delimiter delim The delimiter of the data file. Comment comment The character indicating the starting of comment. The contents after the comment character will be ignore in each line. NA na The way NA is represented in the data file. Code Preview The R code to be executed for importing the data Note that when you change these options, the code in the Code Preview window will change accordingly, which is a great way to learn on how they work. 4.2.6 Exercises If we have a delimited file named “my_data.txt” with * as the delimiter and the file is located in the current working directory. Write R code to read the file into an object with name my_data. First, run the code below. d1 &lt;- read_csv(&quot;x,y,z 1,3,5 2,4,6&quot;, col_names = FALSE) Which of the following are the column names of the d1? X1, X2, and X3 x, y, and z First, run the code below. read_csv(&quot;The first line The second line The third line x,y,z 1,3,5&quot;, ) Which of the following are the column names of the d1? "]]
