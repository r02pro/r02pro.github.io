[["grouped-mutate-filter.html", "6.7 Grouped Mutate and Filter via group_by()", " 6.7 Grouped Mutate and Filter via group_by() In Section 6.6, you have seen the power of group_by() and summarize() which can help to create grouped summaries. In turns out the group_by() can be combined with filter() and mutate() to filter observations by group and create new variables by group. Let’s say we have to focus on the overall conditions where the number of corresponding houses are at least 30. Then, summarize the number of observations and the average sale price for each overall condition. library(r02pro) library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── ## ✓ ggplot2 3.3.5 ✓ dplyr 1.0.7 ## ✓ tidyr 1.1.3 ✓ stringr 1.4.0 ## ✓ readr 1.4.0 ✓ forcats 0.5.1 ## ✓ purrr 0.3.4 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() ahp %&gt;% group_by(oa_cond) %&gt;% filter(n() &gt;= 30) %&gt;% summarize(count = n(), ave_price = mean(sale_price, na.rm = TRUE)) ## # A tibble: 6 x 3 ## oa_cond count ave_price ## &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 3 35 99.8 ## 2 4 70 114. ## 3 5 1165 207. ## 4 6 367 149. ## 5 7 270 155. ## 6 8 101 156. As you can see the code works by Group the observations according to oa_cond. Filter the observations that has a oa_cond which the number of houses having such value is at least 30. For the filtered groups, create two new variables represents the number of houses, and the average sale price, respectively. Next, let’s try to find the top two expensive houses that was remodel each year, show only the remodel year and sale price, and arrange the result in the ascending order of remodel year. To achieve this task, we need to do the following. Group the observations by the remodel year. Compute the rank of each observation in terms of decreasing sale price within each remodel year. Filter the observations the has a rank less than or equal to 2. Select the remodel year and sale price. Arrange the observations according to the ascending order of remodel year. ahp %&gt;% group_by(yr_remodel) %&gt;% mutate(r = rank(desc(sale_price), ties.method = &quot;first&quot;)) %&gt;% filter(r &lt;= 2 ) %&gt;% select(yr_remodel, sale_price) %&gt;% arrange(yr_remodel) ## # A tibble: 122 x 2 ## # Groups: yr_remodel [61] ## yr_remodel sale_price ## &lt;dbl&gt; &lt;dbl&gt; ## 1 1950 257. ## 2 1950 256 ## 3 1951 155 ## 4 1951 141 ## 5 1952 146. ## 6 1952 166 ## 7 1953 217 ## 8 1953 225 ## 9 1954 156. ## 10 1954 150. ## # … with 112 more rows The final example is to group the houses by the combination of kitchen quality (kit_qual) and central AC (central_air), find the two houses with the minimum and maximum sale prices for each group, and compute the IQR of the sale prices for each group. Finally, show the kit_qual, central_air and the three values and arrange the observations in the descending order of maximum sale price for each group. The following is the sequence of operations necessary. Group the houses by kit_qual and central_air. Create three new variables representing the minimum, maximum, and IQR of the sale prices of each group. Select variables kit_qual and central_air and the three newly created ones. Arrange the observations in the descending order of maximum sale price for each group. ahp %&gt;% group_by(kit_qual, central_air) %&gt;% summarize(max_price = max(sale_price, na.rm = TRUE), min_price = min(sale_price, na.rm = TRUE), IQR_price = IQR(sale_price, na.rm = TRUE)) %&gt;% select(kit_qual, central_air, max_price, min_price, IQR_price) %&gt;% arrange(desc(max_price)) ## `summarise()` has grouped output by &#39;kit_qual&#39;. You can override using the `.groups` argument. ## # A tibble: 8 x 5 ## # Groups: kit_qual [4] ## kit_qual central_air max_price min_price IQR_price ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Excellent Y 612. 119 120. ## 2 Good Y 592. 84.9 78.1 ## 3 Average Y 289 50 41.8 ## 4 Fair Y 242. 64 48.1 ## 5 Average N 239 12.8 42.1 ## 6 Good N 214. 64.5 59.6 ## 7 Excellent N 205 122. 41.4 ## 8 Fair N 158 39.3 41.5 "]]
