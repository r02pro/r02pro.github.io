[["matrix.html", "2.13 Matrix", " 2.13 Matrix Having mastered vectors which contain elements of the same type, we now introduce another object type, called matrix, which is a rectangle array that consists of elements of the same type. 2.13.1 Create a matrix from a vector One of most common ways to create a matrix from a vector is to use the function matrix(). In the matrix() function, the first argument is the data vector, nrow and ncol represent the desired numbers of rows and columns of the matrix. matrix(data = 1:12, nrow = 3, ncol = 4) #&gt; [,1] [,2] [,3] [,4] #&gt; [1,] 1 4 7 10 #&gt; [2,] 2 5 8 11 #&gt; [3,] 3 6 9 12 Typically, the length of the supplied vector equals the number of rows multiplied by the number of columns. Otherwise, R will use the recycling rule on the vector to fill in the matrix. This recycling rule is particularly useful to create matrix consisting of elements of the same value. matrix(6, 3, 3) #&gt; [,1] [,2] [,3] #&gt; [1,] 6 6 6 #&gt; [2,] 6 6 6 #&gt; [3,] 6 6 6 Note that you can just specify nrow or ncol if the value of the other one can be implied. For example, you will get the same matrix using the following codes. matrix(data = 1:12, nrow = 3) matrix(data = 1:12, ncol = 4) Looking at the resulting matrix, you may notice that the matrix is created by fill in the columns sequentially with the elements from the input vector. That is, it first fill in the first column, then the second column, and so on. If you want to fill the rows instead of columns, you can add the argument byrow = TRUE. matrix(1:12, nrow = 4, byrow = TRUE) After defining a matrix, we can apply various functions on it. x &lt;- matrix(1:12, nrow = 4) dim(x) #the dimension of a matrix #&gt; [1] 4 3 nrow(x) #the number of row of a matrix #&gt; [1] 4 ncol(x) #the number of column of a matrix #&gt; [1] 3 t(x) #transpose of a matrix #&gt; [,1] [,2] [,3] [,4] #&gt; [1,] 1 2 3 4 #&gt; [2,] 5 6 7 8 #&gt; [3,] 9 10 11 12 To set the names of a matrix, you can use rownames() and colnames() to set the row names and column names, respectively. rownames(x) &lt;- c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;) #row names colnames(x) &lt;- c(&quot;x&quot;,&quot;y&quot;,&quot;z&quot;) #column names Interesting, you can use the same functions rownames() and colnames() to extract the row and column names. rownames(x) colnames(x) We can also convert a matrix to a vector, which will take the elements of the matrix column by column. as.vector(x) #convert matrix to a vector #&gt; [1] 1 2 3 4 5 6 7 8 9 10 11 12 In addition to numeric matrices, you can also create character matrices from a character vector. char_mat &lt;- matrix(letters[1:6], 2, 3) char_mat #&gt; [,1] [,2] [,3] #&gt; [1,] &quot;a&quot; &quot;c&quot; &quot;e&quot; #&gt; [2,] &quot;b&quot; &quot;d&quot; &quot;f&quot; Another way of creating matrix from a vector is to assign the desired dimensions (length-2 integer vector) to the dim() function. my_vec &lt;- 1:6 my_vec #&gt; [1] 1 2 3 4 5 6 dim(my_vec) &lt;- c(2, 3) my_vec #&gt; [,1] [,2] [,3] #&gt; [1,] 1 3 5 #&gt; [2,] 2 4 6 You can see here, my_vec becomes a matrix after we set its dimensions. 2.13.2 Combine vectors or matrices into a matrix To combine two vectors into a matrix, you can use the rbind() or cbind() function to stack the vectors together by row or by column, respectively. z &lt;- 1:4 w &lt;- 5:8 rbind(z,w) #&gt; [,1] [,2] [,3] [,4] #&gt; z 1 2 3 4 #&gt; w 5 6 7 8 cbind(z,w) #&gt; z w #&gt; [1,] 1 5 #&gt; [2,] 2 6 #&gt; [3,] 3 7 #&gt; [4,] 4 8 In addition to combine two vectors, you can also use rbind() and cbind() to combine two matrices. m1 &lt;- matrix(1:6, 2, 3) m2 &lt;- matrix(5:10, 2, 3) rbind(m1, m2) #&gt; [,1] [,2] [,3] #&gt; [1,] 1 3 5 #&gt; [2,] 2 4 6 #&gt; [3,] 5 7 9 #&gt; [4,] 6 8 10 cbind(m1, m2) #&gt; [,1] [,2] [,3] [,4] [,5] [,6] #&gt; [1,] 1 3 5 5 7 9 #&gt; [2,] 2 4 6 6 8 10 2.13.3 Matrix subsetting Like vector subsetting introduced in 2.6.3, we can do matrix subsetting as well. a. using indices to do matrix subsetting The first method for matrix subsetting is to specify the desired row indices and column indices, separated by ,. For example, we can extract the (1, 1) and (2, 3) element of x using the following codes. x[1, 1] #the element on the first row and second column #&gt; [1] 1 x[2, 3] #the element on the second row and third column #&gt; [1] 10 To get a submatrix with multiple rows and columns, you just need to supply the row and column indices separated by ,. x[1:2,2:3] #the elements on the first &amp; second row and second &amp; third column To keep all the rows or columns, you can leave the index location empty. x[2, ] #the elements on the second row x[, 3] #the elements on the third column x[, c(2,3)] #the elements on the second and third columns Similar to vectors, you can use negative indices to get all the rows or columns except the specified one. x[-2, 3] #all rows except the 2nd row, the 3rd column x[-1, -c(2,3)] #all rows except the 1st row, except the 2nd and the 3rd column b. using row and column names to do matrix subsetting Just like vector subsetting for named vectors (Section 2.6.3), we can extract a submatrix using the row and columns names. x[&quot;a&quot;, &quot;z&quot;] x[c(&quot;a&quot;, &quot;c&quot;), c(&quot;x&quot;, &quot;y&quot;)] x[&quot;b&quot;,] c. using logical vectors to do matrix subsetting Similar to vector subsetting, you can also use logical vectors to do matrix subsetting. Note that different from vector subsetting, you can supply two logical vectors, one for rows and another for columns. Let’s see some examples. x[c(T, F, T, F), c(F, T, T)] x[c(F, T, F, T), ] x[, c(T, F, F)] In addition to using the logical values directly, you can also use create a logical vector and use it on the fly to do matrix subsetting. Let’s say we want to keep the rows with the value on the y column larger than 6. To do that, you can create a logical vector x[, \"y\"] &gt; 6, then use it to subset the corresponding rows. x[, &quot;y&quot;] &gt; 6 #logical vector for the rows such that the `y` column &gt; 6 #&gt; a b c d #&gt; FALSE FALSE TRUE TRUE x[x[, &quot;y&quot;] &gt; 6, ] #extract the corresponding rows #&gt; x y z #&gt; c 3 7 11 #&gt; d 4 8 12 Similarly, if we want to keep the columns with the value on the b row less than 7. To do that, you can create a logical vector x[\"b\", ] &lt; 7, then use it to subset the corresponding columns. x[&quot;b&quot;, ] &lt; 7 #logical vector for the columns such that the `b` row &lt; 7 #&gt; x y z #&gt; TRUE TRUE FALSE x[, x[&quot;b&quot;, ] &lt; 7] #extract the corresponding columns #&gt; x y #&gt; a 1 5 #&gt; b 2 6 #&gt; c 3 7 #&gt; d 4 8 Of course, you can combine the two requirements, namely, keep the rows with the value on the y column larger than 6 and the columns with the value on the b row less than 7. x[x[, &quot;y&quot;] &gt; 6, x[&quot;b&quot;, ] &lt; 7] 2.13.4 Operators and functions on matrices Now, let’s introduce some commonly used operators and functions on matrices. First of all, if you use arithmetic operators between two matrices, the specified operation will be performed elementwisely, similar to the operation between two vectors. m1 &lt;- matrix(c(2, 1, 1, 2), 2, 2) m2 &lt;- matrix(c(1, 2, 2, 1), 2, 2) m1 + m2 #&gt; [,1] [,2] #&gt; [1,] 3 3 #&gt; [2,] 3 3 m1 * m2 #&gt; [,1] [,2] #&gt; [1,] 2 2 #&gt; [2,] 2 2 m1 / m2 #&gt; [,1] [,2] #&gt; [1,] 2.0 0.5 #&gt; [2,] 0.5 2.0 You can also apply operations between a matrix and a number (a vector of length 1), where the recycling rule introduced in Section 2.2.1 will apply. m1 * 2 To perform the actual matrix product, you can use the operator *%* between two matrices. m1 %*% m2 #&gt; [,1] [,2] #&gt; [1,] 4 5 #&gt; [2,] 5 4 There are also functions for creating special matrices. To create a diagonal matrix, you can use the diag() function on a vector. diag(1:5) #&gt; [,1] [,2] [,3] [,4] [,5] #&gt; [1,] 1 0 0 0 0 #&gt; [2,] 0 2 0 0 0 #&gt; [3,] 0 0 3 0 0 #&gt; [4,] 0 0 0 4 0 #&gt; [5,] 0 0 0 0 5 The diag() function can also be used to extract the digonal elements of a square matrix. diag(m1) #&gt; [1] 2 2 For a squared matrix \\(A_{n\\times n} = [A_{ij}]\\), you can also calculate its determinant \\(det(A)\\) using det(A). If \\(A\\) is invertible, you can compute its inverse matrix \\(A^{-1}\\) using solve(A). det(m1) #&gt; [1] 3 solve(m1) #&gt; [,1] [,2] #&gt; [1,] 0.6666667 -0.3333333 #&gt; [2,] -0.3333333 0.6666667 m1 %*% solve(m1) ##verify we are getting the inverse of m1 #&gt; [,1] [,2] #&gt; [1,] 1 0 #&gt; [2,] 0 1 To apply a function on all elements of a matrix, you can directly use the function on the matrix object as if it is a vector. The result is equivalent to first convert the matrix into a vector using as.vector() and apply the function on the vector. sum(x) #&gt; [1] 78 mean(x) #&gt; [1] 6.5 quantile(x, c(0.25, 0.5, 0.75)) #&gt; 25% 50% 75% #&gt; 3.75 6.50 9.25 cumsum(x) #&gt; [1] 1 3 6 10 15 21 28 36 45 55 66 78 2.13.5 Apply functions on each row or each column In many applications, we may want to apply certain function on each row or column. To do this, you can use the apply() function, which takes three arguments by default. The first argument is the object, the second argument is the dimension(s) to apply the function on, and the third argument is the function For example, if you want to calculate the mean and sum of each row for x, you can use apply(x, 1, mean) #calculate the mean of each row #&gt; a b c d #&gt; 5 6 7 8 rowMeans(x) #calculate the mean of each row #&gt; a b c d #&gt; 5 6 7 8 apply(x, 1, sum) #calculate the sum of each row #&gt; a b c d #&gt; 15 18 21 24 rowSums(x) #calculate the sum of each row #&gt; a b c d #&gt; 15 18 21 24 Here, 1 means the first dimension, i.e. the row. You can see that the mean for the row a is (1 + 5 + 9)/3 = 5, and the sum is 1 + 5 + 9 = 15. To get the mean and sum of each row, you can also use rowMeans() and rowSums(). To calculate the mean and sum of each column for x, you can use apply(x, 2, mean) #calculate the mean of each column #&gt; x y z #&gt; 2.5 6.5 10.5 colMeans(x) #&gt; x y z #&gt; 2.5 6.5 10.5 apply(x, 2, sum) #&gt; x y z #&gt; 10 26 42 colSums(x) #&gt; x y z #&gt; 10 26 42 Here, 2 means the second dimension, i.e. the column. You can see that the mean for the column y is (5 + 6 + 7 + 8)/4 = 6.5, and the sum is 5 + 6 + 7 + 8 = 26. In addition to the mean and sum functions, you can use any function defined on a vector. Following are some other examples. apply(x, 2, sd) #calculate the standard deviation of each column #&gt; x y z #&gt; 1.290994 1.290994 1.290994 apply(x, 1, max) #calculate the max of each row #&gt; a b c d #&gt; 9 10 11 12 In addition the three arguments, you can add additional arguments that will be passed when applying the specified function. For example, to calculate the first quartile of each column, apply(x, 2, quantile, 0.25) #&gt; x y z #&gt; 1.75 5.75 9.75 If the function you apply returns a vector with more than one elements, the apply() function will create a higher dimensional object. Let’s see an example of calculate the cumulative sum of each row. apply(x, 1, cumsum) #calculate the cumulative sum of each row #&gt; a b c d #&gt; x 1 2 3 4 #&gt; y 6 8 10 12 #&gt; z 15 18 21 24 The mechanism is to the cumsum() function is applied on each row of x and the resulting vectors are combined into a matrix. The following reproduces the results using the cbind() function on the cumulative sum results. cbind(cumsum(x[1,]), cumsum(x[2,]), cumsum(x[3,]), cumsum(x[4,])) As another example, you can use the following code to calculate the (0.25, 0.5, 0.75) quantiles for each column of x. apply(x, 2, quantile, c(0.25, 0.5, 0.75)) #&gt; x y z #&gt; 25% 1.75 5.75 9.75 #&gt; 50% 2.50 6.50 10.50 #&gt; 75% 3.25 7.25 11.25 2.13.6 Exercises Use R to create the following matrix #&gt; [,1] [,2] [,3] [,4] [,5] [,6] #&gt; [1,] 2 1 1 1 1 1 #&gt; [2,] 1 2 1 1 1 1 #&gt; [3,] 1 1 2 1 1 1 #&gt; [4,] 1 1 1 2 1 1 #&gt; [5,] 1 1 1 1 2 1 #&gt; [6,] 1 1 1 1 1 2 For matrix x &lt;- matrix(1:16, 4, 4), compute the following questions using R. Compute the column means of x. Create a matrix that contains the 0.4 and 0.7 quantiles for each row of x. If b &lt;- 1:4, solve a such that \\(Xa = b\\). "]]
