[["list.html", "3.4 List", " 3.4 List In the last section, we have learned data frames whose columns can contain variables of different types. Now, let’s learn the most complex object type in R, namely, the list. 3.4.1 Create a list To create a list, you can use the list() function with the elements separated by comma. dig_num &lt;- 1:6 ani_char &lt;- c(&quot;sheep&quot;, &quot;pig&quot;, &quot;monkey&quot;, &quot;pig&quot;, &quot;monkey&quot;, &quot;pig&quot;) x_mat &lt;- matrix(1:12, nrow = 3, ncol = 4) conditions &lt;- c(&quot;Excellent&quot;, &quot;Good&quot;, &quot;Average&quot;, &quot;Fair&quot;, &quot;Good&quot;, &quot;Excellent&quot;) cond_fac &lt;- factor(conditions, ordered = TRUE, levels = c(&quot;Fair&quot;, &quot;Average&quot;, &quot;Good&quot;, &quot;Excellent&quot;)) my_list &lt;- list(dig_num, ani_char, x_mat, cond_fac) my_list #&gt; [[1]] #&gt; [1] 1 2 3 4 5 6 #&gt; #&gt; [[2]] #&gt; [1] &quot;sheep&quot; &quot;pig&quot; &quot;monkey&quot; &quot;pig&quot; &quot;monkey&quot; &quot;pig&quot; #&gt; #&gt; [[3]] #&gt; [,1] [,2] [,3] [,4] #&gt; [1,] 1 4 7 10 #&gt; [2,] 2 5 8 11 #&gt; [3,] 3 6 9 12 #&gt; #&gt; [[4]] #&gt; [1] Excellent Good Average Fair Good Excellent #&gt; Levels: Fair &lt; Average &lt; Good &lt; Excellent Here, we created a list named my_list, which contains four elements of different types. From the output, at the beginning of each element, its index is shown surrouding by the pair [[ and ]]. Usually, you want to assign a name for each element and the elements can be latter accessed by their names. my_list &lt;- list(number = dig_num, character = ani_char, matrix = x_mat, factor = cond_fac) my_list #&gt; $number #&gt; [1] 1 2 3 4 5 6 #&gt; #&gt; $character #&gt; [1] &quot;sheep&quot; &quot;pig&quot; &quot;monkey&quot; &quot;pig&quot; &quot;monkey&quot; &quot;pig&quot; #&gt; #&gt; $matrix #&gt; [,1] [,2] [,3] [,4] #&gt; [1,] 1 4 7 10 #&gt; [2,] 2 5 8 11 #&gt; [3,] 3 6 9 12 #&gt; #&gt; $factor #&gt; [1] Excellent Good Average Fair Good Excellent #&gt; Levels: Fair &lt; Average &lt; Good &lt; Excellent After the elements are named, the output shows the $ followed by the name before each element. Let’s examine the class, structure, and internal storage type of my_list. class(my_list) #&gt; [1] &quot;list&quot; str(my_list) #&gt; List of 4 #&gt; $ number : int [1:6] 1 2 3 4 5 6 #&gt; $ character: chr [1:6] &quot;sheep&quot; &quot;pig&quot; &quot;monkey&quot; &quot;pig&quot; ... #&gt; $ matrix : int [1:3, 1:4] 1 2 3 4 5 6 7 8 9 10 ... #&gt; $ factor : Ord.factor w/ 4 levels &quot;Fair&quot;&lt;&quot;Average&quot;&lt;..: 4 3 2 1 3 4 typeof(my_list) #&gt; [1] &quot;list&quot; From this example, it is clear that lists are more general than all the object types we have learned. It can contain vectors, matrices, arrays, data frames/tibbles, and even lists. 3.4.2 Extract a list element and list subsetting a. Extract a list element To extract a single element from a list, you can use the $ followed by the element name if the element is named, or use the index surrounded by [[ and ]]. After the elements are extracted, you can directly apply desired functions on them without the need to assign the values to another name. my_list$number #a vector #&gt; [1] 1 2 3 4 5 6 #my_list[[1]] #the first element #my_list$matrix #a matrix my_list[[3]] #the third element #&gt; [,1] [,2] [,3] [,4] #&gt; [1,] 1 4 7 10 #&gt; [2,] 2 5 8 11 #&gt; [3,] 3 6 9 12 mean(my_list$number) #&gt; [1] 3.5 rowMeans(my_list$matrix) #&gt; [1] 5.5 6.5 7.5 If you want do list subsetting by extracting multiple elements, you can follow similar methods as subsetting a vector introduced in Section 2.7.3. b. Use indices to do list subsetting The first method is to use indices to do list subsetting. To get a sublist of the 3rd element of the original list my_list, you can use my_list[3] as below. my_list[3] #the second element of my_list #&gt; $matrix #&gt; [,1] [,2] [,3] [,4] #&gt; [1,] 1 4 7 10 #&gt; [2,] 2 5 8 11 #&gt; [3,] 3 6 9 12 It is worth to do a comparison between the results of my_list[[3]] and my_list[3]. The former is the third element of my_list which is a matrix, while the latter is a list containing a single matrix element. Let’s confirm this by looking at their structures. str(my_list[[3]]) #&gt; int [1:3, 1:4] 1 2 3 4 5 6 7 8 9 10 ... str(my_list[3]) #&gt; List of 1 #&gt; $ matrix: int [1:3, 1:4] 1 2 3 4 5 6 7 8 9 10 ... Of course, you can create a sublist containing multiple element, just like when creating subvectors using indices. my_list[c(1,3)] #the first and third elements of my_list #my_list[-3] #all elements except the third one c. Use names to do list subsetting When the list elements are named, you can also use names around [ and ] to do list subsetting. You can also use a character vector containing the element names. my_list[&#39;number&#39;] #&gt; $number #&gt; [1] 1 2 3 4 5 6 my_list[c(&#39;number&#39;, &#39;matrix&#39;)] #&gt; $number #&gt; [1] 1 2 3 4 5 6 #&gt; #&gt; $matrix #&gt; [,1] [,2] [,3] [,4] #&gt; [1,] 1 4 7 10 #&gt; [2,] 2 5 8 11 #&gt; [3,] 3 6 9 12 3.4.3 List inside a list One interesting aspect of the list type is that you can have lists inside a list. my_big_list &lt;- list(small_list = my_list, number = dig_num) my_big_list #&gt; $small_list #&gt; $small_list$number #&gt; [1] 1 2 3 4 5 6 #&gt; #&gt; $small_list$character #&gt; [1] &quot;sheep&quot; &quot;pig&quot; &quot;monkey&quot; &quot;pig&quot; &quot;monkey&quot; &quot;pig&quot; #&gt; #&gt; $small_list$matrix #&gt; [,1] [,2] [,3] [,4] #&gt; [1,] 1 4 7 10 #&gt; [2,] 2 5 8 11 #&gt; [3,] 3 6 9 12 #&gt; #&gt; $small_list$factor #&gt; [1] Excellent Good Average Fair Good Excellent #&gt; Levels: Fair &lt; Average &lt; Good &lt; Excellent #&gt; #&gt; #&gt; $number #&gt; [1] 1 2 3 4 5 6 If you want to extract ani_char from my_list, you need to use two layers of extraction operations. my_big_list$small_list$ani_char #&gt; NULL my_big_list[[1]][[2]] #&gt; [1] &quot;sheep&quot; &quot;pig&quot; &quot;monkey&quot; &quot;pig&quot; &quot;monkey&quot; &quot;pig&quot; You can further put the my_big_list in another list. my_big_big_list &lt;- list(big_list = my_big_list, character = ani_char) my_big_big_list To extract dig_num from my_big_big_list, you now need three layers of extraction operations. my_big_big_list$big_list$small_list$dig_num #&gt; NULL my_big_big_list[[1]][[1]][[1]] #&gt; [1] 1 2 3 4 5 6 #my_big_big_list[[1]]$small_list[[1]] #mix the two ways for value extraction 3.4.4 Unlist a list Sometime, you may want to unlist a list into a vector. unlist(my_list) #&gt; number1 number2 number3 number4 number5 number6 character1 #&gt; &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;sheep&quot; #&gt; character2 character3 character4 character5 character6 matrix1 matrix2 #&gt; &quot;pig&quot; &quot;monkey&quot; &quot;pig&quot; &quot;monkey&quot; &quot;pig&quot; &quot;1&quot; &quot;2&quot; #&gt; matrix3 matrix4 matrix5 matrix6 matrix7 matrix8 matrix9 #&gt; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;7&quot; &quot;8&quot; &quot;9&quot; #&gt; matrix10 matrix11 matrix12 factor1 factor2 factor3 factor4 #&gt; &quot;10&quot; &quot;11&quot; &quot;12&quot; &quot;4&quot; &quot;3&quot; &quot;2&quot; &quot;1&quot; #&gt; factor5 factor6 #&gt; &quot;3&quot; &quot;4&quot; c(my_list[[1]], my_list[[2]], my_list[[3]], my_list[[4]]) #reproduce the result #&gt; [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;sheep&quot; &quot;pig&quot; #&gt; [9] &quot;monkey&quot; &quot;pig&quot; &quot;monkey&quot; &quot;pig&quot; &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; #&gt; [17] &quot;5&quot; &quot;6&quot; &quot;7&quot; &quot;8&quot; &quot;9&quot; &quot;10&quot; &quot;11&quot; &quot;12&quot; #&gt; [25] &quot;4&quot; &quot;3&quot; &quot;2&quot; &quot;1&quot; &quot;3&quot; &quot;4&quot; As you can tell from the result, the unlist() function works in the following steps. It visits each element of the list sequentially according to the indices, one at a time. Each element will be converted into a vector using the as.vector() function. Then converted vectors of each element will be combined into a longer vector using the c() function. During the c() operation, coercion rules will apply. The named of the final vector will the name of each element followed by the index of the corresponding value inside each list element. Here, my_list doesn’t contain an element that is also a list. When a list contains another list as one of its elements, the unlist() function will also apply the unlist operation on the element by default. In fact, the unlist operation will be applied recursively until none of the elements is a list. Please try to run the following example. unlist(my_big_big_list) If you just want to unlist a list at the first level, you can add the argument recursive = FALSE to the unlist() function. Note that the result will still be a list if the original list contains a list. You can check the result of the following code. unlist(my_big_big_list, recursive = FALSE) "]]
