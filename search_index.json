[["dataframe.html", "2.14 Data Frame and Tibble", " 2.14 Data Frame and Tibble So far, we have learned vectors (Section 2.2 - Section 2.11), matrices (Section 2.12), and arrays (Section 2.13). The three different object types share an important features: they all consist of the elements of the same type, namely numeric, character, or logical. In real applications, it is common to have mixed variable types. To incorporate this, let’s introduce a new object type, namely the data frame. 2.14.1 Introduction to data frames To create a data frame, you can use the data.frame() function with a collection of vectors of the same length. Let’s see an example of some health conditions of a sheep and a pig over the years 2019, 2020 and 2021. animal &lt;- rep(c(&quot;sheep&quot;, &quot;pig&quot;), c(3,3)) year &lt;- rep(2019:2021, 2) weight &lt;- c(110, 120, 140, NA, 300, 800) height &lt;- c(2.2, 2.4, 2.7, 2, 2.1, 2.3) condition &lt;- c(&quot;excellent&quot;, &quot;good&quot;, NA, &quot;excellent&quot;, &quot;good&quot;, &quot;average&quot;) condition &lt;- factor(condition, ordered = TRUE, levels = c(&quot;average&quot;, &quot;good&quot;, &quot;excellent&quot;)) healthy &lt;- c(rep(TRUE, 5), FALSE) my_data_frame &lt;- data.frame(animal, year, weight, height, condition, healthy) my_data_frame #&gt; animal year weight height condition healthy #&gt; 1 sheep 2019 110 2.2 excellent TRUE #&gt; 2 sheep 2020 120 2.4 good TRUE #&gt; 3 sheep 2021 140 2.7 &lt;NA&gt; TRUE #&gt; 4 pig 2019 NA 2.0 excellent TRUE #&gt; 5 pig 2020 300 2.1 good TRUE #&gt; 6 pig 2021 800 2.3 average FALSE Looking at the data frame my_data_frame, it has 6 columns, each of which represents one variable. The variables are of different types. The animal is character, year is integer, both weight and height are doubles, condition is ordered factor, and healthy is logical. This kind of data representation is impossible using matrices since the coercion rule will apply, converting everything into characters. Let’s combine everything into a matrix and check its value. my_mat &lt;- cbind(animal, year, weight, height, condition, healthy) my_mat #&gt; animal year weight height condition healthy #&gt; [1,] &quot;sheep&quot; &quot;2019&quot; &quot;110&quot; &quot;2.2&quot; &quot;3&quot; &quot;TRUE&quot; #&gt; [2,] &quot;sheep&quot; &quot;2020&quot; &quot;120&quot; &quot;2.4&quot; &quot;2&quot; &quot;TRUE&quot; #&gt; [3,] &quot;sheep&quot; &quot;2021&quot; &quot;140&quot; &quot;2.7&quot; NA &quot;TRUE&quot; #&gt; [4,] &quot;pig&quot; &quot;2019&quot; NA &quot;2&quot; &quot;3&quot; &quot;TRUE&quot; #&gt; [5,] &quot;pig&quot; &quot;2020&quot; &quot;300&quot; &quot;2.1&quot; &quot;2&quot; &quot;TRUE&quot; #&gt; [6,] &quot;pig&quot; &quot;2021&quot; &quot;800&quot; &quot;2.3&quot; &quot;1&quot; &quot;FALSE&quot; In the process of creating data frames, you can also name each column. my_data_frame2 &lt;- data.frame(ani = animal, y = year, w = weight, h = height, con = condition, hea = healthy) After creating the data frame, it is useful to examine its class using the class() function and structure using the str() function. class(my_data_frame) #&gt; [1] &quot;data.frame&quot; str(my_data_frame) #&gt; &#39;data.frame&#39;: 6 obs. of 6 variables: #&gt; $ animal : chr &quot;sheep&quot; &quot;sheep&quot; &quot;sheep&quot; &quot;pig&quot; ... #&gt; $ year : int 2019 2020 2021 2019 2020 2021 #&gt; $ weight : num 110 120 140 NA 300 800 #&gt; $ height : num 2.2 2.4 2.7 2 2.1 2.3 #&gt; $ condition: Ord.factor w/ 3 levels &quot;average&quot;&lt;&quot;good&quot;&lt;..: 3 2 NA 3 2 1 #&gt; $ healthy : logi TRUE TRUE TRUE TRUE TRUE FALSE The str() tells us the data frame has 6 observations and 6 variables, along with the type and the first few values of each variable. In Section 2.5, we introduced the very useful function summary() which gives us important summary statistics for a vector. Using summary() on a data frame, you get get the summary statistics for each variable. summary(my_data_frame) #&gt; animal year weight height condition #&gt; Length:6 Min. :2019 Min. :110 Min. :2.000 average :1 #&gt; Class :character 1st Qu.:2019 1st Qu.:120 1st Qu.:2.125 good :2 #&gt; Mode :character Median :2020 Median :140 Median :2.250 excellent:2 #&gt; Mean :2020 Mean :294 Mean :2.283 NA&#39;s :1 #&gt; 3rd Qu.:2021 3rd Qu.:300 3rd Qu.:2.375 #&gt; Max. :2021 Max. :800 Max. :2.700 #&gt; NA&#39;s :1 #&gt; healthy #&gt; Mode :logical #&gt; FALSE:1 #&gt; TRUE :5 #&gt; #&gt; #&gt; #&gt; From the results, you can see that depending on the variable type, you get different forms of summary. In the object my_data_frame, there are two missing values represented by NA. To remove the observations (rows) with NA values, you can use the na.omit() on the data frame. my_df_nona &lt;- na.omit(my_data_frame) my_df_nona #&gt; animal year weight height condition healthy #&gt; 1 sheep 2019 110 2.2 excellent TRUE #&gt; 2 sheep 2020 120 2.4 good TRUE #&gt; 5 pig 2020 300 2.1 good TRUE #&gt; 6 pig 2021 800 2.3 average FALSE You can see that the 3rd and 4th row are removed since they both have a missing observation. 2.14.2 Introduction to tibbles Having learned data frames, we would like to introduce a modern reimagining of data frame, named tibbles. Tibbles are data frames, but make some of the behaviors of data frames to make coding easier. To use the tibble class, you need to install the tibble package, which is part of the tidyverse package. install.packages(&quot;tibble&quot;) After installing the tibble package, you can load the package and create a tibble the same way as you create a data frame. library(tibble) my_tibble &lt;- tibble(animal, year, weight, height, condition, healthy) my_tibble #&gt; # A tibble: 6 x 6 #&gt; animal year weight height condition healthy #&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;ord&gt; &lt;lgl&gt; #&gt; 1 sheep 2019 110 2.2 excellent TRUE #&gt; 2 sheep 2020 120 2.4 good TRUE #&gt; 3 sheep 2021 140 2.7 &lt;NA&gt; TRUE #&gt; 4 pig 2019 NA 2 excellent TRUE #&gt; 5 pig 2020 300 2.1 good TRUE #&gt; 6 pig 2021 800 2.3 average FALSE Another way to create a tibble is using the as_tibble() function on a data frame. as_tibble(my_data_frame) From the output, we can see that tibble shows the variable type under the name, which is very helpful. Once we have a tibble, let’s learn its class and structure. class(my_tibble) #&gt; [1] &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; str(my_tibble) #&gt; tibble [6 × 6] (S3: tbl_df/tbl/data.frame) #&gt; $ animal : chr [1:6] &quot;sheep&quot; &quot;sheep&quot; &quot;sheep&quot; &quot;pig&quot; ... #&gt; $ year : int [1:6] 2019 2020 2021 2019 2020 2021 #&gt; $ weight : num [1:6] 110 120 140 NA 300 800 #&gt; $ height : num [1:6] 2.2 2.4 2.7 2 2.1 2.3 #&gt; $ condition: Ord.factor w/ 3 levels &quot;average&quot;&lt;&quot;good&quot;&lt;..: 3 2 NA 3 2 1 #&gt; $ healthy : logi [1:6] TRUE TRUE TRUE TRUE TRUE FALSE From the result, you can see that in addition to \"data.frame\", the tibble also has classes of \"tbl_df\" and \"tbl\", which contain many useful functions. We will be using tibbles extensively throughout the rest of book due to its advantages over the original data frames. Lastly, we summarize the different variables types of tibble in the following table. Type Section &lt;chr&gt; character vector &lt;int&gt; integer &lt;dbl&gt; double &lt;ord&gt; ordered factor &lt;fct&gt; unordered factor &lt;lgl&gt; logical vector &lt;date&gt; dates &lt;dttm&gt; date-times "]]
