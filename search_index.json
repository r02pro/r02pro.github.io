[["dates.html", "2.11 Dates and Times", " 2.11 Dates and Times In addition to numbers and strings, dates and times are two special formats of vectors which are commonly used. 2.11.1 Dates a. Date class and different formats Let’s first look at the date format of vector. First, to get today’s date, you can use the Sys.Date() function. And you can confirm it is indeed of Date class by the class() function. You can also use str() to get its structure. today &lt;- Sys.Date() today #&gt; [1] &quot;2021-09-21&quot; class(today) #&gt; [1] &quot;Date&quot; str(today) #&gt; Date[1:1], format: &quot;2021-09-21&quot; Looking at the output, it may appear to be the same format as a string. However, it is actually of the Date class, which makes working with dates a piece of cake. For example, we can use today - 1 to get the date of yesterday, and use today + 1 to get the date of tomorrow. today - 1 #&gt; [1] &quot;2021-09-20&quot; today + 1 #&gt; [1] &quot;2021-09-22&quot; today + 10 #&gt; [1] &quot;2021-10-01&quot; You can also get the days of week for a date using the weekdays() function. weekdays(today) If you use a regular character to denote the date information, an error will show up if you try to do addition or subtraction operations on it. date_char &lt;- &quot;2021-09-09&quot; date_char - 1 #&gt; Error in date_char - 1: non-numeric argument to binary operator In addition to get dates in the past or the future, you can use the format() function to format the date into a character format which contains various useful elements of a given date. format(today, &quot;%a, %b %d, %m/%d/%Y&quot;) A list of commonly used elements of dates and the corresponding code is summarized in the following table. Code Name Example %m 2-digit month 09 %d 2-digit day 21 %y 2-digit year 21 %Y 4-digit year 2021 %a abbreviated weekday Tue %A full weekday Tuesday %b abbreviated month Sep %B full month September To convert character representation back to a Date class object, you can use the as.Date() function with the character and its corresponding format. as.Date(&quot;Apr-03-2021&quot;, format = &quot;%b-%d-%Y&quot;) #&gt; [1] &quot;2021-04-03&quot; as.Date(&quot;09/October/97&quot;, format = &quot;%d/%B/%y&quot;) #&gt; [1] &quot;1997-10-09&quot; as.Date(&quot;01-03-2021&quot;, format = &quot;%m-%d-%Y&quot;) #&gt; [1] &quot;2021-01-03&quot; as.Date(&quot;01-03-2021&quot;, format = &quot;%d-%m-%Y&quot;) #&gt; [1] &quot;2021-03-01&quot; as.Date(&quot;2010-02-29&quot;, format = &quot;%Y-%m-%d&quot;) #&gt; [1] NA It is worth noting that the last output is NA, indicating that Feb 29, 2010 is not a valid date. Before moving on, it is useful to mention that R store dates as numbers, represents the days that has passed since Jan 1, 1970. You can again use typeof() to verify the internal type of the dates object. typeof(today) #&gt; [1] &quot;double&quot; Let’s try a few dates and convert them into numeric values. We can also construct date using the number of days since a reference date using the origin argument in the as_date() function. ref_date &lt;- as.Date(&quot;1970/01/01&quot;, format = &quot;%Y/%m/%d&quot;) c(ref_date - 1, ref_date, ref_date + 2) #&gt; [1] &quot;1969-12-31&quot; &quot;1970-01-01&quot; &quot;1970-01-03&quot; as.numeric(c(ref_date - 1, ref_date, ref_date + 2)) #&gt; [1] -1 0 2 as.Date(10, origin = &quot;2021-01-01&quot;) #10 days after 2021-01-01 #&gt; [1] &quot;2021-01-11&quot; days_diff &lt;- today - ref_date #the time difference between two dates days_diff #&gt; Time difference of 18891 days class(days_diff) #&gt; [1] &quot;difftime&quot; It is worth noting that the time different between two dates is an object of a new class, namely the difftime class. Let’s look at the structure of days_diff via the str() function. str(days_diff) #&gt; &#39;difftime&#39; num 18891 #&gt; - attr(*, &quot;units&quot;)= chr &quot;days&quot; You can see that it is stored as a number, with an attribute named \"units\" and the value \"days\". This attribute shows the units of the difference. To get the difference in other units, you can use the difftime() function and specify the units argument to the desired units. hours_diff &lt;- difftime(today, ref_date, units = &quot;hours&quot;) str(hours_diff) #&gt; &#39;difftime&#39; num 453384 #&gt; - attr(*, &quot;units&quot;)= chr &quot;hours&quot; weeks_diff &lt;- difftime(today, ref_date, units = &quot;weeks&quot;) str(weeks_diff) #&gt; &#39;difftime&#39; num 2698.71428571429 #&gt; - attr(*, &quot;units&quot;)= chr &quot;weeks&quot; You can also use the as.difftime() function to help with getting a date. For example, to get the date of 10 weeks later, you can use the following code. ten_week &lt;- as.difftime(10, units = &quot;weeks&quot;) today + ten_week #&gt; [1] &quot;2021-11-30&quot; 2.11.2 Times After talking about dates, it is natural to introduce how times are represented in R. Just like dates, let’s first get the time at the current moment using the Sys.time() function. You can also check its class, structure, and internal storage type by the class(), str(), and typeof() functions. now &lt;- Sys.time() now #&gt; [1] &quot;2021-09-21 14:58:49 EDT&quot; class(now) #&gt; [1] &quot;POSIXct&quot; &quot;POSIXt&quot; str(now) #&gt; POSIXct[1:1], format: &quot;2021-09-21 14:58:49&quot; typeof(now) #&gt; [1] &quot;double&quot; The object now is of class POSIXct. The second element of class(now) is POSIXt, which is a parent class for class POSIXct and class PISIXlt. This parent class POSIXt is used to allow operations such as subtraction to mix the two classes. From the result of typeof(now), we know the object now is stored as double. Indeed, the class POSIXct represents the (signed) number of seconds since the beginning of 1970 as a numeric vector. You can also get the time of an hour ago or a minute later. now - 3600 #&gt; [1] &quot;2021-09-21 13:58:49 EDT&quot; now + 60 #&gt; [1] &quot;2021-09-21 14:59:49 EDT&quot; Similar as dates, you can again use the as.difftime() function to help with getting a time difference object in the given unit. For example, to get the time 2 days 3 hours and 4 minutes later, you can use the following. now + as.difftime(2, units = &quot;days&quot;) + as.difftime(3, units = &quot;hours&quot;) Just like dates, you can format the time into characters via the format() function. format(now, &quot;year %Y, month %m, day %d, hour %H, min %M, second %S&quot;) #&gt; [1] &quot;year 2021, month 09, day 21, hour 14, min 58, second 49&quot; A list of commonly used elements of times and the corresponding code is summarized in the following table. Code Name Example %H hours 14 %M minutes 58 %S seconds 49 %Z time zone EDT You can also display the time in a different time zone by setting the tz argument in the format() function. format(now, tz = &quot;UTC&quot;) #Coordinated Universal Time #&gt; [1] &quot;2021-09-21 18:58:49&quot; format(now, tz = &quot;America/Los_Angeles&quot;) #Pacific Standard Time #&gt; [1] &quot;2021-09-21 11:58:49&quot; format(now, tz = &quot;America/New_York&quot;) #Eastern Standard Time #&gt; [1] &quot;2021-09-21 14:58:49&quot; format(now, tz = &quot;Europe/London&quot;) #Greenwich Mean Time #&gt; [1] &quot;2021-09-21 19:58:49&quot; To create a time object from a character, you can use the as.POSIXlt() function with the optional format argument. You can also specify the tryFormats argument, which contains a character vector with all possible formats to try. as.POSIXct(&quot;2021-09-21 13:14:15&quot;, format = &quot;%Y-%m-%d %H:%M:%S&quot;) #&gt; [1] &quot;2021-09-21 13:14:15 EDT&quot; as.POSIXct(&quot;13:14:15, Sep 21, 2021&quot;, format = &quot;%H:%M:%S, %b %d, %Y&quot;) #&gt; [1] &quot;2021-09-21 13:14:15 EDT&quot; 2.11.3 Exercises From year 1900 to year 2021 (inclusive), calculate the number of leap years. (Hint: for a leap year, February has 29 days instead of 28. The value of as.Date(\"2010-02-29\", format = \"%Y-%m-%d\") is NA) If x &lt;- as.Date(\"69-01-01\", format = \"%y-%m-%d\") and y &lt;- as.Date(\"68-12-31\", format = \"%y-%m-%d\"), what is x - y? Please think about the answer first, then try it in R. What’s the date of the day that is 1000 days later than Feb 14, 2021. What’s the time that is 1 year, 2 days, 3 hours, 4 minutes, and 5 seconds past 8:15pm on July 4, 2021. "]]
