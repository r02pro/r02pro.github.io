[["statistical-functions-on-vectors.html", "2.5 Statistical functions on vectors", " 2.5 Statistical functions on vectors In this section, we will continue talking about functions on vectors, and focus on various summary statistics. 2.5.1 Numeric vectors Speaking of statistics, 你一定会想到 statistics on numeric vectors. Let’s first create a numeric vector which will be used throughout this section(和上一节的语言重复) h &lt;- c(3, 2, 75, 0, 100) h #check the value of h Next, we will divide statistical functions into several groups, and we will introduce groups one by one. Group A min(h) max(h) range(h) First, you can get the minimum value and maximum value of a numeric vector, and range() produces a length-2 vector with both the minimum (the left element) and maximum (the right element). Group B which.min(h) which.max(h) After getting the minimum value and the maximum value, you can get the location of the minimum value. Here, the fourth element in h has the minimum value, so you will get the result of 4 from which.min(). If there are multiple elements with the minimum value, which.min() will return the first location. Similarly, which.max() tells you the location of the maximum value. g &lt;- c(2, 2, 1, 1) which.min(g) which.max(g) The third element and the fourth element in g both have the minimum value, but you will get the result of 3 from which.min(). Similarly, which.max() gives you the result of 1. Group C cummin(h) cummax(h) In addition to the standard minimum, we also have the cumulative minimum function, called cummin(). It returns a vector of the same length as the input vector, with the value at each location being the minimum of all preceding elements until that location in the original vector. For example, the first element is 3 since the minimum of the first element is always itself, the second element is 1 since the minimum of the first two elements 3 and 2 is 2, and so on. Note that once we reaches the minimum value of the vector, the remaining cumulative minimum will remain the minimum value. There is also a corresponding function for computing the cumulative maximum, called cummax(). Group D sum(h) cumsum(h) Next, let’s look at the sum() function, which produces the sum of all elements of the vector. For the numeric vector h, the summation is 3+2+75+0+100, which is 180. Similarly, if you want to have the cumulative summation, you can use cumsum(), which works by summing up the elements cumulatively up to each location. For example, the first element is 3 since there is only one element to do summation, the second element is 5 since the summation of the first two elements 3 and 2 is 5, you can check the value of each element by yourself. Group E prod(h) cumprod(h) We also have the prod() function, computing the product of all elements of h. Since there is 0 in h, the result of all elements of h will be 0. Again, we have the cumulative product function working by producting the elements cumulatively up to each location. Group F sort(h) #&gt; [1] 0 2 3 75 100 Before introducing this group, let’s first review the sort() function. By default, this function can sort elements from smallest to largest. We have introduced it in … mean(h) median(h) Then in this group, we have the mean() function, which returns the average of all elements. And the median() function returns the middle number when all elements are listed in order from smallest to largest. If the vector length is odd, the middle number is the value of the middle element after sorting. Looking at the results of sort(h), we can see that the median corresponds to the 3rd number out of 5 numbers since there are two numbers larger than 3 and two numbers smaller than 3. If the vector length is even, the middle number is the average of two middle elements after sorting sort(g) median(g) Take g for example, after sorting, you will see that 1 and 2 are in middle, the median is then defined as the average of these two elements, equaling 1.5 Group G Operation Explanation min(h) get the minimum value max(h) get the maximum value range(h) get both the minimum value and the maximum value which.min(h) get the location of the minimum value which.max(h) get the location of the maximum value cummin(h) get the minimum value of all preceding elements until each location cummax(h) get the maximum value of all preceding elements until each location sum(h) get the sum of all elements cumsum(h) sum up the elements cumulatively up to each location prod(h) get the product of all elements cumprod(h) product cumulatively up to each locatio mean(h) get the average of all elements median(h) get the middle number when all elements are listed in order from smallest to largest quantile(h, probs = 0.95) IQR(h) summary(h) var(h) sum((h-mean(h))^2)/(length(h)-1) sd(h) sqrt(var(h)) lag(h) lag(h, 2) diff(h) diff(h, lag = 2) Unlike sort(), you can’t get positions in the descending order from the rank() function, which means you can’t add decreasing = TRUE in rank(). 2.5.2 Character vectors 2.5.3 Logical vectors 2.5.4 Exercise You can run the following code to do the exercise. r02pro(2) "]]
