[["null.html", "2.14 NULL, NaN, and Inf", " 2.14 NULL, NaN, and Inf Having learned the special missing value representation NA in Section 2.11, we will introduce three additional values to represent unexpected results, namely the NULL, NaN, and Inf. During the process, we will take about their relationship to NA as well. 2.14.1 NULL First, let’s take a look at str(), typeof() and length() of NULL. str(NULL) #&gt; NULL typeof(NULL) #&gt; [1] &quot;NULL&quot; length(NULL) #&gt; [1] 0 As you can NULL only has a has class NULL with no values inside, hence the length is 0. It is worth to have comparison with NA regarding these items. str(NA) #&gt; logi NA typeof(NA) #&gt; [1] &quot;logical&quot; length(NA) #&gt; [1] 1 NULL is often returned by expressions and functions whose value is undefined. a. Undefined field of a list The first scenario of NULL is when you try to access an element of a list that is undefined. my_list &lt;- list(num = 1:3, char = c(&quot;a&quot;, &quot;b&quot;)) my_list$logi #&gt; NULL Here, the result is NULL since logi is not a defined field in my_list. b. Remove an element from a list You can remove an element from a list by assign it the NULL value. length(my_list) #&gt; [1] 2 my_list$num &lt;- NULL length(my_list) #&gt; [1] 1 my_list #&gt; $char #&gt; [1] &quot;a&quot; &quot;b&quot; As you can see from the output, the element num is removed from my_list, leading to the length of my_list reduced by 1. c. Initialize a list of certain length The NULL value is useful to serve as the default initial value when you want to create a list of certain length using the vector() function. my_list &lt;- vector(mode = &quot;list&quot;, length = 3) my_list #&gt; [[1]] #&gt; NULL #&gt; #&gt; [[2]] #&gt; NULL #&gt; #&gt; [[3]] #&gt; NULL It is worth mentioning that the vector() function is also useful to initialize a vector of given mode and length. vector(&quot;numeric&quot;, length = 2) ##default is 0 #&gt; [1] 0 0 vector(&quot;logical&quot;, length = 2) ##default is FALSE #&gt; [1] FALSE FALSE vector(&quot;integer&quot;, length = 2) ##default is 0 #&gt; [1] 0 0 vector(&quot;character&quot;, length = 2) ##default is empty string #&gt; [1] &quot;&quot; &quot;&quot; To check if an element is NULL, you can’t use the logical comparison == NULL. Instead, you need to use the is.null() function. a &lt;- NULL a == NULL #&gt; logical(0) is.null(a) #&gt; [1] TRUE It is worth explaining the result of a == NULL is logical(0), representing a logical vector of length 0. The underlying reason is that NULL contains no value and is of length 0. As the == comparison returns a logical type object, hencing leading to a logical vector of length 0. d. NULL values when creating a vector If you create a vector with NULL values, all NULL values will be removed if there exists at least one regular values. If all of them are NULL values, only one of them will be kept. Note that there is fundamentally different from NA values. NA means the value is there, but the exact value is not available to us. c(NULL, NULL, 1, NULL) #&gt; [1] 1 c(NULL, NULL) #&gt; NULL c(NA, NA) #&gt; [1] NA NA 2.14.2 NaN NaN, represents Not a Number, usually appears when you divide 0 by 0. 0/0 #&gt; [1] NaN Again, it is worth to look at str(), typeof() and length() of NaN. str(NaN) #&gt; num NaN typeof(NaN) #&gt; [1] &quot;double&quot; length(NaN) #&gt; [1] 1 As you can see from the results, NaN is a numeric vector of length 1, with the value NaN. To check if a value is NaN, you can’t use the == NaN similar to checking missing values, instead you need to use the function is.nan(). a &lt;- NaN a == NaN ##resulting an NA value #&gt; [1] NA is.nan(a) ##the correct way to check if the value is NaN #&gt; [1] TRUE is.nan(c(NA, 1, NaN)) #&gt; [1] FALSE FALSE TRUE 2.14.3 Inf The last special we want to introduce in this section is Inf, representing the value is positive infinity (\\(\\infty\\)), corresponding to a proper mathematical limit. Similarly, we also have negative infinity: -Inf. 1/0 #&gt; [1] Inf -2/0 #&gt; [1] -Inf Inf &gt; 3 #&gt; [1] TRUE Inf &lt; -1 #&gt; [1] FALSE Inf + Inf #&gt; [1] Inf -Inf + 1e10 #&gt; [1] -Inf 1/0 - 1/0 #it equals 0/0, hencing NaN #&gt; [1] NaN Again, it is worth to look at str(), typeof() and length() of Inf. str(Inf) #&gt; num Inf typeof(Inf) #&gt; [1] &quot;double&quot; length(Inf) #&gt; [1] 1 As you can see from the results, similar to NaN, Inf is a numeric vector of length 1, but with the value Inf. To check whether a value is finite or infinite, you can use the is.finite() and is.infinite() function. is.finite(1/0) #&gt; [1] FALSE is.infinite(-3/0) #&gt; [1] TRUE 2.14.4 A comparison of the four special values in R We would like to summarize the different behaviors of the four special values in R in the following table. Summary NA NULL NaN Inf class() \"logical\" \"NULL\" \"numeric\" \"numeric\" length() 1 0 1 1 check is.na() is.null() is.nan() is.finite() "]]
