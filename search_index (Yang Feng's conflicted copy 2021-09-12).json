[["dates.html", "2.10 Dates and Times", " 2.10 Dates and Times In addition to numbers and strings, dates and times are two special formats of vectors which are commonly used. 2.10.1 Dates a. introduction to Date class and different formats Let’s first look at the date format of vector. First, to get today’s date, you can use the Sys.Date() function. And you can confirm it is indeed of Date class by the class() function. today &lt;- Sys.Date() today #&gt; [1] &quot;2021-09-11&quot; class(today) #&gt; [1] &quot;Date&quot; Looking at the output, it may appear to be the same format as a string. However, it is actually of the Date class, which makes working with dates a piece of cake. For example, we can use today - 1 to get the date of yesterday, and use today + 1 to get the date of tomorrow. today - 1 #&gt; [1] &quot;2021-09-10&quot; today + 1 #&gt; [1] &quot;2021-09-12&quot; today + 10 #&gt; [1] &quot;2021-09-21&quot; You can also get the days of week for a date using the weekdays() function. weekdays(today) If you use a regular character to denote the date information, an error will show up if you try to do addition or subtraction operations on it. date_char &lt;- &quot;2021-09-09&quot; date_char - 1 #&gt; Error in date_char - 1: non-numeric argument to binary operator In addition to get dates in the past or the future, you can use the format() function to format the date into a character format which contains various useful elements of a given date. format(today, &quot;%a, %b %d, %m/%d/%Y&quot;) A list of commonly used elements of dates and the corresponding code is summarized in the following table. Code Name Example %m 2-digit month 09 %d 2-digit day 11 %y 2-digit year 21 %Y 4-digit year 2021 %a abbreviated weekday Sat %A full weekday Saturday %b abbreviated month Sep %B full month September To convert character representation back to a Date class object, you can use the as.Date() function with the character and its corresponding format. as.Date(&quot;Apr-03-2021&quot;, format = &quot;%b-%d-%Y&quot;) #&gt; [1] &quot;2021-04-03&quot; as.Date(&quot;09/October/97&quot;, format = &quot;%d/%B/%y&quot;) #&gt; [1] &quot;1997-10-09&quot; as.Date(&quot;01-03-2021&quot;, format = &quot;%m-%d-%Y&quot;) #&gt; [1] &quot;2021-01-03&quot; as.Date(&quot;01-03-2021&quot;, format = &quot;%d-%m-%Y&quot;) #&gt; [1] &quot;2021-03-01&quot; Before moving on, it is useful to mention that R store dates as integers, represents the days that has passed since Jan 1, 1970. Let’s try a few dates and convert them into numeric values. We can also construct date using the number so days since a reference date (the origin argument in the as_date() function) ref_date &lt;- as.Date(&quot;1970/01/01&quot;, format = &quot;%Y/%m/%d&quot;) c(ref_date - 1, ref_date, ref_date + 2) #&gt; [1] &quot;1969-12-31&quot; &quot;1970-01-01&quot; #&gt; [3] &quot;1970-01-03&quot; as.numeric(c(ref_date - 1, ref_date, ref_date + 2)) #&gt; [1] -1 0 2 as.Date(10, origin = &quot;2021-01-01&quot;) #10 days after 2021-01-01 #&gt; [1] &quot;2021-01-11&quot; today - ref_date #the time difference between two dates #&gt; Time difference of 18881 days 2.10.2 Times After talking about dates, it is natural to introduce how times are represented in R. Just like dates, let’s first get the time right now. now &lt;- Sys.time() now #&gt; [1] &quot;2021-09-11 17:54:50 EDT&quot; You can also get the time of an hour ago or a minute later. now - 3600 #&gt; [1] &quot;2021-09-11 16:54:50 EDT&quot; now + 60 #&gt; [1] &quot;2021-09-11 17:55:50 EDT&quot; Just like dates, you can format the time into characters via the format() function. 2.10.3 Exercises "]]
